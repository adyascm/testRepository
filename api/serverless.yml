# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: adya

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python2.7
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.stages.${self:provider.stage}.awsProfile}
  region: ${self:custom.stages.${self:provider.stage}.region}
  timeout: 300
  versionFunctions: false
  environment:
    UI_HOST: ${self:custom.stages.${self:provider.stage}.httpProtocol}${self:custom.stages.${self:provider.stage}.uiHost}
    API_HOST: ${self:custom.stages.${self:provider.stage}.httpProtocol}${self:custom.stages.${self:provider.stage}.apiHost}
    DB_URL: ${opt:DB_URL, 'localhost:3306'}
    DB_USERNAME: ${opt:DB_USERNAME, 'root'}
    DB_PWD: ${opt:DB_PWD, 'root'}
    DB_NAME: ${opt:DB_NAME, 'dev'}
    DEPLOYMENT_ENV: ${self:provider.stage, 'dev'}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - "ses:SendEmail"
        - "lambda:InvokeFunction"
        - "lambda:GetFunction"
        - "events:PutRule"
        - "events:PutTargets"
        - "lambda:AddPermission"
        - "events:*"
        - "iam:PassRole"
        - "ses:SendRawEmail"
      Resource:
        "*"

plugins:
  - serverless-domain-manager

custom:
  defaultStage: dev
  stages:
    dev: 
      awsProfile: devProfile
      dbName: "dev"
      region: us-east-1
      httpProtocol: "https://"
      apiHost: "api-dev.adyatest.com"
      uiHost: "app.adyatest.com"
    prod: 
      awsProfile: prodProfile
      dbName: "prod"
      region: us-east-1
      httpProtocol: "https://"
      apiHost: "api.adya.io"
      uiHost: "app.adya.io"

  customDomain:
    domainName: ${self:custom.stages.${self:provider.stage}.apiHost}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: regional


# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - api/datasources/**
#  exclude:
#    - lib/**
#    - exclude-me-dir/**

functions:
  get-googleoauthlogin:
    handler: adya.services.lambda.auth_handler.google_oauth_request
    events:
      - http:
          path: googleoauthlogin
          method: get

  get-googleoauthcallback:
    handler: adya.services.lambda.auth_handler.google_oauth_callback
    events:
      - http:
          path: googleoauthcallback
          method: get

  get-currentuser:
    handler: adya.services.lambda.auth_handler.current_user
    events:
      - http:
          path: user
          method: get
          cors: true

  get-datasources:
    handler: adya.services.lambda.domain_handler.get_datasource
    events:
      - http:
          path: datasources
          method: get
          cors: true

  post-datasources:
    handler: adya.services.lambda.domain_handler.post_datasource
    events:
      - http:
          path: datasources
          method: post
          cors: true

  delete-datasources:
    handler: adya.services.lambda.domain_handler.delete_datasource
    events:
      - http:
          path: datasources
          method: delete
          cors: true

  get-widgets:
    handler: adya.services.lambda.reports_handler.get_widget_data
    events:
      - http:
          path: widgets
          method: get
          cors: true

  get-getusertreedata:
    handler: adya.services.lambda.reports_handler.get_user_tree_data
    events:
      - http:
          path: getusergrouptree
          method: get
          cors: true

  get-getresourcetree:
    handler: adya.services.lambda.reports_handler.get_resources
    events:
      - http:
          path: getresourcetree
          method: get
          cors: true

  post-getresourcetree:
    handler: adya.services.lambda.reports_handler.get_resource_tree_data
    events:
      - http:
          path: getresourcetree
          method: post
          cors: true

  get-scheduledreport:
    handler: adya.services.lambda.reports_handler.get_scheduled_reports
    events:
      - http:
          path: scheduledreport
          method: get
          cors: true

  post-scheduledreport:
    handler: adya.services.lambda.reports_handler.post_scheduled_report
    events:
      - http:
          path: scheduledreport
          method: post
          cors: true

  post-scan-start:
    handler: adya.services.lambda.scan_handler.start_scan
    events:
      - http:
          path: scan/start
          method: post
          cors: true

  get-scan-resources:
    handler: adya.services.lambda.scan_handler.get_drive_resources
    events:
      - http:
          path: scan/resources
          method: get
          cors: true

  post-scan-resources:
    handler: adya.services.lambda.scan_handler.process_drive_resources
    events:
      - http:
          path: scan/resources
          method: post
          cors: true

  post-scan-permisssions:
    handler: adya.services.lambda.scan_handler.process_resource_permissions
    events:
      - http:
          path: scan/permisssions
          method: post
          cors: true

  get-scan-domainusers:
    handler: adya.services.lambda.scan_handler.get_domain_users
    events:
      - http:
          path: scan/domainusers
          method: get
          cors: true

  post-scan-domainusers:
    handler: adya.services.lambda.scan_handler.process_domain_users
    events:
      - http:
          path: scan/domainusers
          method: post
          cors: true

  get-scan-domaingroups:
    handler: adya.services.lambda.scan_handler.get_domain_groups
    events:
      - http:
          path: scan/domaingroups
          method: get
          cors: true
        
  post-scan-domaingroups:
    handler: adya.services.lambda.scan_handler.process_domain_groups
    events:
      - http:
          path: scan/domaingroups
          method: post
          cors: true

  get-scan-groupmembers:
    handler: adya.services.lambda.scan_handler.get_group_members
    events:
      - http:
          path: scan/groupmembers
          method: post
          cors: true

  get-scan-handlechannelexpiration:
    handler: adya.services.lambda.scan_handler.handle_channel_expiration
    events:
      - http:
          path: handlechannelexpiration
          method: get
          cors: true

  post-scan-processnotifications:
    handler: adya.services.lambda.scan_handler.process_gdrive_notifications
    events:
      - http:
          path: scan/processnotifications
          method: post
          cors: true

  post-scan-subscribenotifications:
    handler: adya.services.lambda.scan_handler.subscribe_gdrive_notifications
    events:
      - http:
          path: scan/subscribenotifications
          method: post
          cors: true

  get-getactivitiesforuser:
    handler: adya.services.lambda.activities_handler.get_activities_for_user
    events:
      - http:
          path: getactivitiesforuser
          method: get
          cors: true
  get-getauditlog:
    handler: adya.services.lambda.auditlog_handler.get_audit_log
    events:
      - http:
          path: getauditlog
          method: get
          cors: true
  get-executescheduledreport:
     handler: adya.services.lambda.reports_handler.execute_cron_report

  delete-scheduledreport:
    handler: adya.services.lambda.reports_handler.delete_scheduled_report
    events:
      - http:
          path: scheduledreport
          method: delete
          cors: true
  get-runscheduledreport:
    handler: adya.services.lambda.reports_handler.run_scheduled_report
    events:
      - http:
          path: scheduledreport/runreport
          method: get
          cors: true
  put-modifyscheduledreport:
    handler: adya.services.lambda.reports_handler.modify_scheduled_report
    events:
      - http:
          path: scheduledreport
          method: put
          cors: true
  get-getallactions:
    handler: adya.services.lambda.actions_handler.get_all_actions
    events:
      - http:
          path: getallactions
          method: get
          cors: true
  post-getallactions:
    handler: adya.services.lambda.actions_handler.initiate_action
    events:
      - http:
          path: initiateaction
          method: post
          cors: true

