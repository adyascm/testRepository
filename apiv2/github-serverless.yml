service: github

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python2.7
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.stages.${self:provider.stage}.awsProfile}
  region: ${self:custom.stages.${self:provider.stage}.region}
  timeout: 300
  versionFunctions: false
  environment:
    UI_HOST: ${self:custom.stages.${self:provider.stage}.httpProtocol}${self:custom.stages.${self:provider.stage}.uiHost}
    API_HOST: ${self:custom.stages.${self:provider.stage}.httpProtocol}${self:custom.stages.${self:provider.stage}.apiHost}
    DB_URL: ${opt:DB_URL, 'localhost:3306'}
    DB_USERNAME: ${opt:DB_USERNAME, 'root'}
    DB_PWD: ${opt:DB_PWD, 'root'}
    DB_NAME: ${opt:DB_NAME, 'dev'}
    DEPLOYMENT_ENV: ${self:provider.stage, 'dev'}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - "ses:SendEmail"
        - "lambda:InvokeFunction"
        - "lambda:GetFunction"
        - "events:PutRule"
        - "events:PutTargets"
        - "lambda:AddPermission"
        - "events:*"
        - "iam:PassRole"
        - "ses:SendRawEmail"
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
      Resource:
        "*"
  vpc:
    securityGroupIds:
      - sg-5d5eae14
    subnetIds:
      - subnet-ccc4cae3
      - subnet-30c5c86d

plugins:
  - serverless-domain-manager

custom:
  defaultStage: dev
  stages:
    dev:
      awsProfile: devProfile
      dbName: "dev"
      region: us-east-1
      httpProtocol: "https://"
      apiHost: "api-dev.adyatest.com"
      uiHost: "app.adyatest.com"
    staging:
      awsProfile: devProfile
      dbName: "staging"
      region: us-east-1
      httpProtocol: "https://"
      apiHost: "apistaging.adya.io"
      uiHost: "staging.adya.io"
    prod:
      awsProfile: prodProfile
      dbName: "prod"
      region: us-east-1
      httpProtocol: "https://"
      apiHost: "api.adya.io"
      uiHost: "app.adya.io"
    liteapp:
      awsProfile: prodProfile
      dbName: "liteapp"
      region: us-east-1
      httpProtocol: "https://"
      apiHost: "liteappapi.adya.io"
      uiHost: "liteapp.adya.io"

  customDomain:
    domainName: ${self:custom.stages.${self:provider.stage}.apiHost}
    basePath: "github"
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: regional

functions:
  get-github-oauthlogin:
    handler: adya.github.services.oauth_handler.github_oauth_request
    events:
      - http:
          path: oauthlogin
          method: get

  get-github-oauthcallback:
    handler: adya.github.services.oauth_handler.github_oauth_callback
    events:
      - http:
          path: oauthcallback
          method: get
  
  # post-github-scan-start:
  #   handler: adya.github.services.scan_handler.start_github_scan
  #   events:
  #     - http:
  #         path: scan/start
  #         method: post
  #         cors: true
  
  # get-github-scan-users:
  #   handler: adya.github.services.scan_handler.get_github_users
  #   events:
  #     - http:
  #         path: scan/users
  #         method: get

  # post-github-scan-users:
  #   handler: adya.github.services.scan_handler.process_github_users
  #   events:
  #     - http:
  #         path: scan/users
  #         method: post
  #         cors: true

  # post-github-scan-repository:
  #   handler: adya.github.services.scan_handler.process_github_repository
  #   events:
  #     - http:
  #         path: scan/repository
  #         method: post
  #         cors: true

  get-github-scan-entities:
    handler: adya.github.services.scan_handler.request_scanner_data
    events:
      - http:
          path: scan/entities
          method: get
          cors: true

  post-github-scan-entities:
    handler: adya.github.services.scan_handler.process_scanner_data
    events:
      - http:
          path: scan/entities
          method: post
          cors: true
  
  post-github-scan:
    handler: adya.github.services.scan_handler.update_scan
    events:
      - http:
          path: scan
          method: post
          cors: true
  
  post-github-processnotifications:
    handler: adya.github.services.notifications_handler.receive_github_notifications
    events:
      - http:
          path: processnotifications
          method: post
          cors: true