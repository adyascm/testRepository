service: gsuite

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python2.7
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.stages.${self:provider.stage}.awsProfile}
  region: ${self:custom.stages.${self:provider.stage}.region}
  timeout: 300
  versionFunctions: false
  environment:
    UI_HOST: ${self:custom.stages.${self:provider.stage}.httpProtocol}${self:custom.stages.${self:provider.stage}.uiHost}
    API_HOST: ${self:custom.stages.${self:provider.stage}.httpProtocol}${self:custom.stages.${self:provider.stage}.apiHost}
    DB_URL: ${opt:DB_URL, 'localhost:3306'}
    DB_USERNAME: ${opt:DB_USERNAME, 'root'}
    DB_PWD: ${opt:DB_PWD, 'root'}
    DB_NAME: ${opt:DB_NAME, 'dev'}
    DEPLOYMENT_ENV: ${self:provider.stage, 'dev'}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - "ses:SendEmail"
        - "lambda:InvokeFunction"
        - "lambda:GetFunction"
        - "events:PutRule"
        - "events:PutTargets"
        - "lambda:AddPermission"
        - "events:*"
        - "iam:PassRole"
        - "ses:SendRawEmail"
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
      Resource:
        "*"
  vpc: 
    securityGroupIds:
      - sg-5d5eae14
    subnetIds:
      - subnet-ccc4cae3
      - subnet-30c5c86d       

plugins:
  - serverless-domain-manager

custom:
  defaultStage: dev
  stages:
    dev:
      awsProfile: devProfile
      dbName: "dev"
      region: us-east-1
      httpProtocol: "https://"
      apiHost: "api-dev.adyatest.com"
      uiHost: "app.adyatest.com"
    staging: 
      awsProfile: devProfile
      dbName: "staging"
      region: us-east-1
      httpProtocol: "https://"
      apiHost: "apistaging.adya.io"
      uiHost: "staging.adya.io"
    prod:
      awsProfile: prodProfile
      dbName: "prod"
      region: us-east-1
      httpProtocol: "https://"
      apiHost: "api.adya.io"
      uiHost: "app.adya.io"
    liteapp: 
      awsProfile: prodProfile
      dbName: "liteapp"
      region: us-east-1
      httpProtocol: "https://"
      apiHost: "liteappapi.adya.io"
      uiHost: "liteapp.adya.io"

  customDomain:
    domainName: ${self:custom.stages.${self:provider.stage}.apiHost}
    basePath: "google"
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: regional

functions:
  get-google-oauthlogin:
    handler: adya.gsuite.services.oauth_handler.google_oauth_request
    events:
      - http:
          path: oauthlogin
          method: get

  get-google-oauthcallback:
    handler: adya.gsuite.services.oauth_handler.google_oauth_callback
    events:
      - http:
          path: oauthcallback
          method: get

  get-google-scan:
    handler: adya.gsuite.services.scan_handler.start_scan
    events:
      - http:
          path: scan
          method: get
          cors: true

  post-google-scan:
    handler: adya.gsuite.services.scan_handler.update_scan
    events:
      - http:
          path: scan
          method: post
          cors: true

  get-google-scan-entities:
    handler: adya.gsuite.services.scan_handler.request_scanner_data
    events:
      - http:
          path: scan/entities
          method: get
          cors: true

  post-google-scan-entities:
    handler: adya.gsuite.services.scan_handler.process_scanner_data
    events:
      - http:
          path: scan/entities
          method: post
          cors: true

  get-google-scan-handlechannelexpiration:
    handler: adya.gsuite.services.scan_handler.handle_channel_expiration
    events:
      - http:
          path: handlechannelexpiration
          method: get
          cors: true

  get-google-scan-polldrivechanges:
    handler: adya.gsuite.services.scan_handler.gdrive_periodic_changes_poll
    events:
      - http:
          path: scan/polldrivechanges
          method: get
          cors: true

  post-google-scan-processdrivenotifications:
    handler: adya.gsuite.services.scan_handler.process_drive_change_notifications
    events:
      - http:
          path: scan/processdrivenotifications
          method: post
          cors: true

  post-google-scan-processactivitynotifications:
    handler: adya.gsuite.services.scan_handler.process_activity_notifications
    events:
      - http:
          path: scan/processactivitynotifications
          method: post
          cors: true        

  post-google-scan-subscribenotifications:
    handler: adya.gsuite.services.scan_handler.subscribe_gdrive_notifications
    events:
      - http:
          path: scan/subscribenotifications
          method: post
          cors: true

  get-google-getactivitiesforuser:
    handler: adya.gsuite.services.activities_handler.get_activities_for_user
    events:
      - http:
          path: getactivitiesforuser
          method: get
          cors: true

  post-google-policies-validate:
    handler: adya.gsuite.services.policy_validate_handler.validate_policy
    events:
      - http:
          path: policies/validate
          method: post
          cors: true

  post-google-execute-actions:
    handler: adya.gsuite.services.actions_handler.execute_gsuite_actions
    events:
      - http:
          path: actions
          method: post
          cors: true

